import Plots as plt
using PGFPlots
using XLSX
using DataFrames
# gr()
input_file = "Toplitz data.xlsx"

data1 = XLSX.readtable(input_file, "PCT") |> DataFrame
describe(data1)

vscodedisplay(data1)

raw_data1 = transform(data1, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data1[!, 3:end]))
xtcks = (1:8, raw_data1[1:8, 2])
vscodedisplay(raw_data1)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end
function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data1 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data1,label=:none)
    plt.plot(p, data1, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts1 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data1, sz)
end

plt.pgfplotsx()

pt = plt.plot(plts1..., layout=(2, 3), size=(800, 600))

plt.savefig(pt, "PT_toplitz.tex")




data2 = XLSX.readtable(input_file, "PCI") |> DataFrame
describe(data2)

vscodedisplay(data2)

raw_data2 = transform(data2, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data2[!, 3:end]))
xtcks = (1:8, raw_data2[1:8, 2])
vscodedisplay(raw_data2)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data2 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data2, label=:none)
    plt.plot(p, data2, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts2 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data2, sz)
end

plt.pgfplotsx()

Pi = plt.plot(plts2..., layout=(2, 3), size=(800, 600))

plt.savefig(Pi, "PI_toplitz.tex")

data3 = XLSX.readtable(input_file, "PCE") |> DataFrame
describe(data3)

vscodedisplay(data3)

raw_data3 = transform(data3, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data3[!, 3:end]))
xtcks = (1:8, raw_data3[1:8, 2])
vscodedisplay(raw_data3)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data3 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data3, label=:none)
    plt.plot(p, data3, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts3 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data3, sz)
end

plt.pgfplotsx()

pe = plt.plot(plts3..., layout=(2, 3), size=(800, 600))

plt.savefig(pe, "PE_toplitz.tex")

data4 = XLSX.readtable(input_file, "CT") |> DataFrame
describe(data4)

vscodedisplay(data4)

raw_data4 = transform(data4, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data4[!, 3:end]))
xtcks = (1:8, raw_data4[1:8, 2])
vscodedisplay(raw_data4)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data4 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data4, label=:none)
    plt.plot(p, data4, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts4 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data4, sz)
end

plt.pgfplotsx()

ct = plt.plot(plts4..., layout=(2, 3), size=(800, 600))

plt.savefig(ct, "CT_toplitz.tex")

data5 = XLSX.readtable(input_file, "CI") |> DataFrame
describe(data5)

vscodedisplay(data5)

raw_data5 = transform(data5, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data5[!, 3:end]))
xtcks = (1:8, raw_data5[1:8, 2])
vscodedisplay(raw_data5)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data5 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data5, label=:none)
    plt.plot(p, data5, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts5 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data5, sz)
end

plt.pgfplotsx()

ci = plt.plot(plts5..., layout=(2, 3), size=(800, 600))

plt.savefig(ci, "CI_toplitz.tex")

data6 = XLSX.readtable(input_file, "CE") |> DataFrame
describe(data6)

vscodedisplay(data6)

raw_data6 = transform(data6, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data6[!, 3:end]))
xtcks = (1:8, raw_data6[1:8, 2])
vscodedisplay(raw_data6)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data6 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data6, label=:none)
    plt.plot(p, data6, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts6 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data6, sz)
end

plt.pgfplotsx()

ce = plt.plot(plts6..., layout=(2, 3), size=(800, 600))

plt.savefig(ce, "CE_toplitz.tex")

data7 = XLSX.readtable(input_file, "PCF") |> DataFrame
describe(data7)

vscodedisplay(data7)

raw_data7 = transform(data7, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data7[!, 3:end]))
xtcks = (1:8, raw_data7[1:8, 2])
vscodedisplay(raw_data7)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data7 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data7, label=:none)
    plt.plot(p, data7, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts7 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data7, sz)
end

plt.pgfplotsx()

pf = plt.plot(plts7..., layout=(2, 3), size=(800, 600))

plt.savefig(pf, "PF_toplitz.tex")

data8 = XLSX.readtable(input_file, "CF") |> DataFrame
describe(data8)

vscodedisplay(data8)

raw_data8 = transform(data8, [1, 3, 4, 5, 6] => ByRow((x1, x2, x3, x4, x5) -> (Int.(x1), x2, x3, x4, x5)) => [:sz, :Pro, :SQV, :SQT, :SQQ])
labels = permutedims(names(raw_data8[!, 3:end]))
xtcks = (1:8, raw_data1[1:8, 2])
vscodedisplay(raw_data8)

function getDataBySize(df, sz)
    filter(r -> r[:sz] == sz, df)
end

function getPlotingData(df)
    df[!, 3:end] |> Matrix
end

function getPlot(df, sz)
    data8 = getDataBySize(df, sz) |> getPlotingData
    p = plt.scatter(data8, label=:none)
    plt.plot(p, data8, legend=:outertop, label=labels, xticks=xtcks, title="Size:$(sz)", legend_column=-1, xtickfont=(6), titlefont=("Arial", 8, :bold), xrotation=45)
end

plts8 = map([10, 15, 25, 50, 100, 200]) do sz
    getPlot(raw_data8, sz)
end

plt.pgfplotsx()

cf = plt.plot(plts8..., layout=(2, 3), size=(800, 600))

plt.savefig(cf, "CF_toplitz.tex")
